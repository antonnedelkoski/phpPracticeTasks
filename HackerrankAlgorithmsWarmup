<?php
//https://www.hackerrank.com/domains/algorithms?filters%5Bsubdomains%5D%5B%5D=warmup EXAMPLES
/*
 * Complete the 'simpleArraySum' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts INTEGER_ARRAY ar as parameter.
 */
function simpleArraySum($ar) {
   $sum=0;
   foreach($ar as $element){
       $sum+=$element;
   }
    return $sum;
}
$fptr = fopen(getenv("OUTPUT_PATH"), "w");
$ar_count = intval(trim(fgets(STDIN)));
$ar_temp = rtrim(fgets(STDIN));
$ar = array_map('intval', preg_split('/ /', $ar_temp, -1, PREG_SPLIT_NO_EMPTY));
$result = simpleArraySum($ar);
fwrite($fptr, $result . "\n");
fclose($fptr);

<?php

/*
 * Complete the 'compareTriplets' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY a
 *  2. INTEGER_ARRAY b
 */

function compareTriplets($a, $b) 
{
    $pointsAlice = 0;
    $pointsBob = 0;
    $sumArray = [];
    
    for($i=0; $i<3;$i++)
    {
        if($a[$i]>$b[$i])
        {
            $pointsAlice+=1;
        }
        else if($a[$i] < $b[$i])
        {
            $pointsBob+=1;    
        }       
    }
    array_push($sumArray,$pointsAlice,$pointsBob);
    return $sumArray;
}
$fptr = fopen(getenv("OUTPUT_PATH"), "w");
$a_temp = rtrim(fgets(STDIN));
$a = array_map('intval', preg_split('/ /', $a_temp, -1, PREG_SPLIT_NO_EMPTY));
$b_temp = rtrim(fgets(STDIN));
$b = array_map('intval', preg_split('/ /', $b_temp, -1, PREG_SPLIT_NO_EMPTY));
$result = compareTriplets($a, $b);
fwrite($fptr, implode(" ", $result) . "\n");
fclose($fptr);


<?php

/*
 * Complete the 'diagonalDifference' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts 2D_INTEGER_ARRAY arr as parameter.
 */

function diagonalDifference($arr) {
    // Write your code here
    $length = count($arr);
    $absSum = 0;
    $sumLeftToRight = 0;
    $sumRightToLeft = 0;
    for($i = 0; $i < $length; $i++)
    {
        for($j = 0; $j < $length; $j++) {
            if($i == $j) {
                $sumLeftToRight += $arr[$i][$j];
            } 
            if (($i + $j) == ($length-1)) {
                $sumRightToLeft += $arr[$i][$j];
            }
            
        }
        $absSum = abs($sumLeftToRight - $sumRightToLeft);
    }
    return $absSum;

}

$fptr = fopen(getenv("OUTPUT_PATH"), "w");

$n = intval(trim(fgets(STDIN)));

$arr = array();

for ($i = 0; $i < $n; $i++) {
    $arr_temp = rtrim(fgets(STDIN));

    $arr[] = array_map('intval', preg_split('/ /', $arr_temp, -1, PREG_SPLIT_NO_EMPTY));
}
$result = diagonalDifference($arr);
fwrite($fptr, $result . "\n");
fclose($fptr);

/*
 * Complete the 'aVeryBigSum' function below.
 *
 * The function is expected to return a LONG_INTEGER.
 * The function accepts LONG_INTEGER_ARRAY ar as parameter.
 */

function aVeryBigSum($ar) {
    // Write your code here
      $sum=0;
   foreach($ar as $element){
       $sum+=$element;
   }
    return $sum;

}

/*
 * Complete the 'plusMinus' function below.
 *
 * The function accepts INTEGER_ARRAY arr as parameter.
 */

function plusMinus($arr) {
    // Write your code here
    $length = count($arr);
    $positive = 0;
    $negative = 0;
    $zero = 0;
    $pRatio = 0.000000;
    $nRatio = 0.000000;
    $zRatio = 0.000000; 
    for($i = 0; $i < $length; $i++)
    {
        if($arr[$i] < 0){
            $negative += 1;
        }
        else if ($arr[$i] == 0){
            $zero += 1;
        }
        else {
            $positive+=1;
        }
            
    }
    $pRatio = $positive / $length;
    $nRatio = $negative / $length;
    $zRatio = $zero / $length;
    
    echo ("$pRatio\n");
    echo ("$nRatio\n");
    echo ("$zRatio\n");

}

$n = intval(trim(fgets(STDIN)));

$arr_temp = rtrim(fgets(STDIN));

$arr = array_map('intval', preg_split('/ /', $arr_temp, -1, PREG_SPLIT_NO_EMPTY));

plusMinus($arr);



